generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── ADRESSE DU PROFIL ──────────────────────────────────────────────
//

model Address {
  id         Int      @id @default(autoincrement())
  address    String
  city       String
  state      String
  country    String
  postalCode String
  Profile    Profile? @relation(fields: [profileId], references: [id])
  profileId  Int      @unique
}

//
// ─── UTILISATEUR (COMPTE GLOBAL) ────────────────────────────────────
//

model User {
  id                     Int                 @id @default(autoincrement())
  email                  String              @unique @db.VarChar(255)
  username               String
  password               String
  isAdmin                Boolean             @default(false)
  Profile                Profile?
  Documents              Document[]
  Threads                Thread[]
  Posts                  Post[]
  CustomersReferences    CustomerReference[]
  Prestations            Prestation[]
  Experiences            Experience[]
  realisations           Realisation[]
  Trainings              Training[]
  Diplomas               Diploma[]
  Applications           Application[]
  updatedAt              DateTime            @updatedAt
  createdAt              DateTime            @default(now())
  emailConfirmed         Boolean             @default(false)
  emailConfirmationToken String?             @unique
}

//
// ─── DOCUMENTS LIÉS AU COMPTE ───────────────────────────────────────
//

model Document {
  id           Int     @id @default(autoincrement())
  userId       Int
  type         String
  fileName     String
  originalName String
  format       String?
  version      Int?
  publicId     String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

//
// ─── PROFIL PROFESSIONNEL ──────────────────────────────────────────
//

model Profile {
  id                 Int       @id @default(autoincrement())
  firstname          String?   @default("")
  lastname           String?   @default("")
  phone              String?   @default("")
  bio                String?   @default("")
  languages          Json?     @default("[]")
  siret              String?   @default("")
  registrationNumber String?   @default("")
  Address            Address?
  smallDayRate       Int?      @default(0)
  mediumDayRate      Int?      @default(0)
  highDayRate        Int?      @default(0)
  teleworkDays       Int       @default(0)
  isEmployed         Boolean?  @default(false)
  availableDate      DateTime?
  User               User      @relation(fields: [userId], references: [id])
  userId             Int       @unique
}

//
// ─── FORUM DE DISCUSSION ───────────────────────────────────────────
//

model Thread {
  id        Int      @id @default(autoincrement())
  subject   String
  posts     Post[]
  Author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  Author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  Thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

//
// ─── RÉFÉRENCES CLIENTS ─────────────────────────────────────────────
//

model CustomerReference {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  mark       Int
  commentary String
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

//
// ─── EXPÉRIENCES PROS ──────────────────────────────────────────────
//

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  client      String
  description String
  domains     String
  languages   String[]
  skills      String
  userId      Int
  User        User     @relation(fields: [userId], references: [id])
  domainsList Domain[]
}

model Realisation {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  userId      Int
  user        User   @relation(fields: [userId], references: [id])

  files   RealisationFile[] @relation("RealisationFiles")
  technos Techno[]          @relation("RealisationTechnos")
}

/**
 * ----------- enfants ----------------------------------------------
 */

model RealisationFile {
  id            Int @id @default(autoincrement())
  realisationId Int

  realisation Realisation @relation("RealisationFiles", fields: [realisationId], references: [id], onDelete: Cascade)

  fileName     String
  originalName String
  version      Int?
  publicId     String
  format       String
}

model Techno {
  id            Int    @id @default(autoincrement())
  name          String
  level         String
  realisationId Int

  realisation Realisation @relation("RealisationTechnos", fields: [realisationId], references: [id], onDelete: Cascade)
}

//
// ─── FORMATIONS ET COMPÉTENCES ─────────────────────────────────────
//

model Training {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  skills      Json
  Domains     Domain[]
  User        User     @relation(fields: [userId], references: [id])
  userId      Int
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Diploma {
  id        Int         @id @default(autoincrement())
  title     String
  type      DiplomaType
  skills    Json
  languages Json
  User      User        @relation(fields: [userId], references: [id])
  userId    Int
  Domain    Domain      @relation(fields: [domainId], references: [id])
  domainId  Int
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
}

//
// ─── RÉALISATIONS / PROJETS / LIVRE BLANC ──────────────────────────
//

model Application {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  software       String
  whitePaperPath String
  whitePaperUrl  String
  Domain         Domain   @relation(fields: [domainId], references: [id])
  domainId       Int
  User           User     @relation(fields: [userId], references: [id])
  userId         Int
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
}

model Prestation {
  id     Int    @id @default(autoincrement())
  type   String
  tech   String
  level  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

//
// ─── DOMAINES DE COMPÉTENCE ────────────────────────────────────────
//

model Domain {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  experiences Experience[]
  Training    Training[]
  Diploma     Diploma[]
  Application Application[]
}

//
// ─── TYPES ENUMS ───────────────────────────────────────────────────
//

enum DocumentType {
  ID_PHOTO
  CV
}

enum DiplomaType {
  DIPLOMA
  CERTIFICATE
}
