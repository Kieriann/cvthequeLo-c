generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int      @id @default(autoincrement())
  address    String
  city       String
  state      String
  country    String
  postalCode String
  Profile    Profile? @relation(fields: [profileId], references: [id])
  profileId  Int      @unique
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  username            String
  password            String
  isAdmin             Boolean @default(false)
  Profile             Profile?
  Documents           Document[]
  Threads             Thread[]
  Posts               Post[]
  CustomersReferences CustomerReference[]
  Experiences         Experience[]
  Trainings           Training[]
  Diplomas            Diploma[]
  Applications        Application[]
  updatedAt           DateTime         @default(now())
  createdAt           DateTime         @updatedAt
}

model Document {
  id     String       @id @default(uuid())
  type   DocumentType
  User   User         @relation(fields: [userId], references: [id])
  userId Int          @unique
}

model Profile {
  id                 Int      @id @default(autoincrement())
  firstname          String?  @default("")
  lastname           String?  @default("")
  phone              String?  @default("")
  bio                String?  @default("")
  languages          Json?    @default("[]")
  siret              String?  @default("")
  registrationNumber String?  @default("")
  Address            Address?
  smallDayRate       Int?     @default(0)
  mediumDayRate      Int?     @default(0)
  highDayRate        Int?     @default(0)
  isEmployed         Boolean? @default(false)
  User               User     @relation(fields: [userId], references: [id])
  userId             Int      @unique
}

model Thread {
  id        Int      @id @default(autoincrement())
  subject   String
  posts     Post[]
  Author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  updatedAt DateTime @default(now())
  createdAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  Author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  Thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  updatedAt DateTime @default(now())
  createdAt DateTime @updatedAt
}

model CustomerReference {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  mark       Int
  commentary String
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  updatedAt  DateTime @default(now())
  createdAt  DateTime @updatedAt
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  skills      Json
  languages   Json
  Domains     Domain[]
  User        User     @relation(fields: [userId], references: [id])
  userId      Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @updatedAt
}

model Training {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  skills      Json
  Domains     Domain[]
  User        User     @relation(fields: [userId], references: [id])
  userId      Int
  updatedAt   DateTime @default(now())
  createdAt   DateTime @updatedAt
}

model Diploma {
  id        Int         @id @default(autoincrement())
  title     String
  type      DiplomaType
  skills    Json
  languages Json
  User      User        @relation(fields: [userId], references: [id])
  userId    Int
  Domain    Domain      @relation(fields: [domainId], references: [id])
  domainId  Int
  updatedAt DateTime    @default(now())
  createdAt DateTime    @updatedAt
}

model Application {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  software       String
  whitePaperPath String
  whitePaperUrl  String
  Domain         Domain   @relation(fields: [domainId], references: [id])
  domainId       Int
  User           User     @relation(fields: [userId], references: [id])
  userId         Int
  updatedAt      DateTime @default(now())
  createdAt      DateTime @updatedAt
}

model Domain {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  Experience  Experience[]
  Training    Training[]
  Diploma     Diploma[]
  Application Application[]
}

enum DocumentType {
  ID_PHOTO
  CV
}

enum DiplomaType {
  DIPLOMA
  CERTIFICATE
}
